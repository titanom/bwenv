on:
  workflow_dispatch:

name: CI

env:
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  check:
    name: Check, Format, Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: mozilla-actions/sccache-action@v0.0.3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Lint
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, aarch64]
        lib: [gnu, musl]
        exclude:
          - os: macos-latest
            lib: musl
          - os: ubuntu-latest
            arch: aarch64

    steps:
      - uses: actions/checkout@v3
      - uses: mozilla-actions/sccache-action@v0.0.3
  
      - name: Compute Linux Target
        id: linux-target
        if: startsWith(matrix.os, 'ubuntu')
        run: echo "target=${{ matrix.arch }}-unknown-linux-${{ matrix.lib }}" >> $GITHUB_OUTPUT

      - name: Compute Apple Target
        id: apple-target
        if: startsWith(matrix.os, 'macos')
        run: echo "target=${{ matrix.arch }}-apple-darwin" >> $GITHUB_OUTPUT

      - name: Print Target
        id: target
        run: echo "target=${{ steps.linux-target.outputs.target || steps.apple-target.outputs.target }}" >> $GITHUB_OUTPUT

      - name: Print Actual Target
        run: echo "${{ steps.target.outputs.target }}"

      - name: Install Rust Toolchain
        run: rustup target add ${{ steps.target.outputs.target }}

      - name: Install musl Compiler
        if: startsWith(matrix.lib, 'musl')
        run: sudo apt-get update && sudo apt install musl-tools

      - name: Build Target ${{ steps.target.outputs.target }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ steps.target.outputs.target }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.target.outputs.target }}
          path: ./target/${{ steps.target.outputs.target }}/release/bwenv


  release:
    name: Release
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts for x86_64-unknown-linux-gnu
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu
          path: ./x86_64-unknown-linux-gnu

      - name: Download build artifacts for x86_64-unknown-linux-musl
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-musl
          path: ./x86_64-unknown-linux-musl

      - name: Download build artifacts for aarch64-apple-darwin
        uses: actions/download-artifact@v3
        with:
          name: aarch64-apple-darwin
          path: ./aarch64-apple-darwin

      - name: Download build artifacts for x86_64-apple-darwin
        uses: actions/download-artifact@v3
        with:
          name: x86_64-apple-darwin
          path: ./x86_64-apple-darwin

      - name: Create archive for x86_64-unknown-linux-gnu
        run: zip -r -j bwenv-x86_64-unknown-linux-gnu.zip x86_64-unknown-linux-gnu/bwenv

      - name: Create archive for x86_64-unknown-linux-musl
        run: zip -r -j bwenv-x86_64-unknown-linux-musl.zip x86_64-unknown-linux-musl/bwenv

      - name: Create archive for aarch64-apple-darwin
        run: zip -r -j bwenv-aarch64-apple-darwin.zip aarch64-apple-darwin/bwenv

      - name: Create archive for x86_64-apple-darwin
        run: zip -r -j bwenv-x86_64-apple-darwin.zip x86_64-apple-darwin/bwenv

      - name: Read version from Cargo.toml
        id: get_version
        run: echo "version=$(awk -F' = ' '/^version/ {gsub(/"/, "", $2); print $2}' Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./bwenv-x86_64-unknown-linux-gnu.zip
            ./bwenv-x86_64-unknown-linux-musl.zip
            ./bwenv-aarch64-apple-darwin.zip
            ./bwenv-x86_64-apple-darwin.zip
          tag_name: "v${{ steps.get_version.outputs.version }}"
          name: "Release v${{ steps.get_version.outputs.version }}"
